name: Release

on:
  pull_request:
    types:
      - closed
    branches:
      - main

permissions:
  contents: write

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
    
    - name: Get current date
      id: date
      run: echo "date=$(Get-Date -Format 'yyyy-MM-dd')" >> $env:GITHUB_OUTPUT
      shell: pwsh
      
    - name: Generate semantic version
      id: version
      run: |
        # Get the latest release tag
        $latestTag = gh release list --limit 1 --json tagName --jq '.[0].tagName' 2>$null
        
        if ([string]::IsNullOrEmpty($latestTag)) {
          # No previous releases, start with v1.0.0
          $newVersion = "v1.0.0"
          $numericVersion = "1.0.0"
        } else {
          # Parse current version (format: vX.Y.Z)
          $latestTag -match 'v?(\d+)\.(\d+)\.(\d+)' | Out-Null
          $major = [int]$matches[1]
          $minor = [int]$matches[2]
          $patch = [int]$matches[3]
          
          # Get PR labels
          $labels = '${{ toJson(github.event.pull_request.labels.*.name) }}' | ConvertFrom-Json
          
          # Determine version bump based on labels
          if ($labels -contains 'major' -or $labels -contains 'breaking') {
            $major++
            $minor = 0
            $patch = 0
          } elseif ($labels -contains 'minor' -or $labels -contains 'feature') {
            $minor++
            $patch = 0
          } else {
            # Default to patch for fixes, chores, refactors, etc.
            $patch++
          }
          
          $newVersion = "v$major.$minor.$patch"
          $numericVersion = "$major.$minor.$patch"
        }
        
        echo "version=$newVersion" >> $env:GITHUB_OUTPUT
        echo "numeric_version=$numericVersion" >> $env:GITHUB_OUTPUT
        echo "Generated version: $newVersion"
      shell: pwsh
      env:
        GH_TOKEN: ${{ github.token }}
        
    - name: Restore dependencies
      run: dotnet restore src/portable-image-gallery.sln
      
    - name: Build
      run: dotnet build src/portable-image-gallery.sln --configuration Release --no-restore /p:VersionPrefix=${{ steps.version.outputs.numeric_version }}
      
    - name: Run tests
      run: dotnet test src/ImageGallery.Tests/ImageGallery.Tests.csproj --configuration Release --no-build --verbosity normal
      
    - name: Publish
      run: dotnet publish src/ImageGallery/ImageGallery.csproj --configuration Release --output ./publish /p:VersionPrefix=${{ steps.version.outputs.numeric_version }}
      
    - name: Create Release Archive
      run: |
        Compress-Archive -Path ./publish/* -DestinationPath ImageGallery-${{ steps.version.outputs.version }}.zip
      shell: pwsh
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## ImageGallery Release
          
          **Version:** ${{ steps.version.outputs.version }}
          **Date:** ${{ steps.date.outputs.date }}
          **PR:** #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}
          
          ### Changes
          ${{ github.event.pull_request.body }}
          
          ### Installation
          1. Download `ImageGallery-${{ steps.version.outputs.version }}.zip`
          2. Extract the archive
          3. Run `ImageGallery.exe`
          
          ### Usage
          See [CLI_USAGE.md](https://github.com/${{ github.repository }}/blob/main/src/CLI_USAGE.md) for command-line options.
          
          ---
          *This release was automatically generated by GitHub Actions*
        files: |
          ImageGallery-${{ steps.version.outputs.version }}.zip
        draft: false
        prerelease: false
    
    - name: Create tag on main branch
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
        git push origin ${{ steps.version.outputs.version }}
      shell: pwsh
